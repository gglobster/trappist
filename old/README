### NOTE: THE PROJECT IS ON HOLD FOR THE FORESEEABLE FUTURE  ###

Hello and welcome, potential trappist enthusiast!

A trappist is a type of Belgian beer traditionally brewed by monks. It's
also the name of this project because the original plan was to develop a
small program to identify and thus "trap" conserved plasmid backbones. If
you don't know what that means, don't worry. The point is that it was a lame
excuse to have the line "This is Spinal Trap" on a PowerPoint slide 6
months ago. And if you don't know what THAT means you were probably born in
the 1990's or later, which is fine. But you should google it. It's a
cultural gem of the mid-80's (not a lot of competition there).

So without further ado, here's a very rough overview of the project specs :

The idea is to build an application that serves as a "workbench" for
analysis of genome data. The workbench provides a set of tools/tasks (load
sequences, make alignments, search a database, ... all operations batchable)
that users can string together into workflows. Some default workflows are
provided for common tasks. Advanced users can contribute their own
tools/tasks modules and workflows to the community. Users can choose to
compose and execute workflows through a CLI or through a user-friendly GUI
with a diagram-style visual representation. The output is stored in a
database and can be loaded into an interactive data explorer with the
option to output publication-quality vector images. The application includes
a form of logging and version control for every step, so that users can run
the workflows with different parameters and compare the outputs.

Yes, if you know bioinformatics, it sounds a lot like the Galaxy framework,
but cooler. Because it's in Python, not Perl, and it's aimed primarily at
regular wetlab biologists who do not have a clue about scripting and still
do all their BLAST searches by manually cutting and pasting sequences one by
one into a browser window. Some say those people should be shot. Some say
they should be left to go the way of dinosaurs and microarrays. I say they
are the workhorse of experimental biology; it's not their fault they didn't
get the right training in school, and don't have the time to learn those
skills now because they're too busy doing really cool experimental biology.
They are my  friends and colleagues and I want to help them. Because I can.
It's my superhero power. I'm not the best biologist ever (though I'm pretty
well published, thank you), and I'll never be the best programmer ever (I'm
shooting for half-decent). But I understand both worlds and that puts me in
a rare position to do something useful for once in my life.

Ahem. /soapbox

So that's the plan. Now, the development status to date :

Looking like it might be on its way to advance somewhere eventually, as I've
teamed up with someone who knows what he's doing!

So, my new partner Shankar is working on setting up a framework for the app,
as well as a user interface based on my preliminary app views (see specs).
I'm working on writing the basic tools and data objects that are going to
constitute the workflows. The next step is going to be wrapping the tools in
code that makes them accessible as workflow components.

Plus there's two kind souls who have offered to go through the completed code
units and suggest more efficient, elegant or otherwise more harmoniously
pythonic ways to code unit functions as applicable. And also to replace some
of my ugly stubs by mocks, which I struggle with to this day.

Any other offers of help, advice, feedback and beer are welcome. Actually,
I may offer beer as a reward. Or academic paper co-authorship if you're into
that (I'm guessing that most non-academics will prefer beer).

I look forward to hearing from you!

--gglobster
